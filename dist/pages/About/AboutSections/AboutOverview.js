import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import Accordion from "@mui/material/Accordion";
import AccordionDetails from "@mui/material/AccordionDetails";
import AccordionSummary from "@mui/material/AccordionSummary";
import Divider from "@mui/material/Divider";
import Paper from "@mui/material/Paper";
import Typography from "@mui/material/Typography";
import React from "react";
import { BulletPointList } from "../../Help/HelpStyledComponents";
export function AboutOverview() {
    return (React.createElement(Paper, { component: "section", sx: { maxWidth: 2160 } },
        React.createElement(Accordion, null,
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, null) },
                React.createElement(Typography, { variant: "h4", component: "h1" }, "Overview")),
            React.createElement(AccordionDetails, null,
                React.createElement(Divider, { style: { width: "100%", marginBottom: "1rem" } }),
                React.createElement("p", null, "The overall pipeline is as follows:"),
                React.createElement("br", null),
                React.createElement(Typography, { variant: "h5", component: "h2" }, "1) Import Module"),
                React.createElement("p", null,
                    "As per BIDS standard, users will start off with their scanner data organized under a",
                    " ",
                    React.createElement("strong", null, "sourcedata"),
                    " folder that itself is a child of the root study folder. They will then specify the structure of the dataset - which folder levels house subject names versus visit designations versus scan type, etc. This will permit the program to convert all DICOM files into NIFTI format (necessary for image processing) and organize this NIFTI output into BIDS standard output folders: ",
                    React.createElement("strong", null, "rawdata"),
                    " and",
                    " ",
                    React.createElement("strong", null, "derivatives"),
                    "."),
                React.createElement("br", null),
                React.createElement(Typography, { variant: "h5", component: "h2" }, "2) Defining Data Parameters"),
                React.createElement("p", null, "To accomodate the plethora of ASL variants and setups that are possible, an entire module is dedicated to specifying the parameters required to process imaging data. These include, but are not limited to:"),
                React.createElement("br", null),
                React.createElement("ul", { style: { listStylePosition: "inside", textIndent: 2, marginLeft: "1rem" } },
                    React.createElement("li", null, "Study-related Parameters: which subjects to process/exclude, which MATLAB/ExploreASL configuration to use, etc."),
                    React.createElement("li", null, "Acquisition Parameters: vendor, sequence type, labeling duration, etc."),
                    React.createElement("li", null, "Quantification Parameters: T1 and T2* values, single vs dual compartment modelling, etc."),
                    React.createElement("li", null, "Processing Parameters: registration configurations, partial volume correction, DARTEL, longitudinal registration, etc."),
                    React.createElement("li", null, "Etc. etc. Over 50 other parameters to cater to your dataset's requirements.")),
                React.createElement("br", null),
                React.createElement(Typography, { variant: "h5", component: "h2" }, "3) Editing BIDS Fields at the scan level"),
                React.createElement("p", null, "For complex datasets, this program offers the oppurtunity to alter specific BIDS fields for every ASL scan within an imported dataset."),
                React.createElement("br", null),
                React.createElement("p", null, "Users can interact with a loaded spreadsheet of every ASL BIDS sidecar, edit/remove values, add/remove columns, etc., and save the adjusted values back into every sidecar file. This saves users the hassle and error-prone nature of manually editing every BIDS sidecar individually."),
                React.createElement("br", null),
                React.createElement(Typography, { variant: "h5", component: "h2" }, "4) Multiprocessing of Studies"),
                React.createElement("p", null, "ExploreASL supports workstation multiprocessing from the get-go without any configuration. Allocate multiple cores towards multiple studies which can all be run in parallel to make the most of your workstation's capabilities and cut down processing time from weeks to days or hours. Studies have independent output and progressbar feedback in addition to supporting independent pause/resume/terminate capability without affecting the analysis of other studies."),
                React.createElement("br", null),
                React.createElement(Typography, { variant: "h5", component: "h2" }, "5) Data Visualization"),
                React.createElement("p", null, "Users are able to load in an ExploreASL-processed study, along with optional metadata from a spreadsheet file, and plot data according to two major visualization schemes:"),
                React.createElement("br", null),
                React.createElement(BulletPointList, null,
                    React.createElement("li", null, "Scatterplots for Continuous x Continuous data"),
                    React.createElement("li", null, "Swarmplots for Categorical x Continuous data")),
                React.createElement("br", null),
                React.createElement("p", null, "Furthermore, these graphs are interactive in multiple ways:"),
                React.createElement("br", null),
                React.createElement(BulletPointList, null,
                    React.createElement("li", null, "Most plot settings are adjustable (i.e. marker size, margins, axis label font sizes, etc.)"),
                    React.createElement("li", null,
                        "For immense datasets, subsetting functionality is available. Users can trim down data to only present the exact data that is desired through multiple subsetters. Subsetter functions include:",
                        React.createElement(BulletPointList, null,
                            React.createElement("li", null,
                                "Single-Equivalency Operators: Equals (",
                                "=",
                                ") and Not-Equals ",
                                "≠"),
                            React.createElement("li", null, "Multi-Equivalency Operators: \"includes\" and \"excludes\""),
                            React.createElement("li", null,
                                "Relational Operators: ",
                                ">",
                                " , ",
                                "≥",
                                " , ",
                                "<",
                                " , and ",
                                "≤"))),
                    React.createElement("li", null, "Clicking on any datapoint will load in the processed CBF output for that particular subject as 3 interactable MRI image + sliders (one set per orientation)"))))));
}
//# sourceMappingURL=AboutOverview.js.map